name: castella.network CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache
        id: cache-castella
        uses: actions/cache@v2
        with:
          path: .
          key: ${{ runner.os }}-castella

      - uses: actions/setup-go@v2
        with:
            go-version: '1.17'
      - run: go version
      
      - name: Patched OpenSSL
        run: |
            sudo apt-get update
            sudo apt-get install -y wget unzip ffmpeg python3-pip git cargo zlib1g-dev libcunit1 libcunit1-dev libev-dev libc-ares-dev libxml2-dev libjansson-dev libjemalloc-dev libsystemd-dev libevent-dev libunwind-dev cython python3-dev python-setuptools
            sudo cd /tmp
            sudo git clone --depth 1 -b OpenSSL_1_1_1d-quic-draft-24 https://github.com/tatsuhiro-t/openssl
            sudo cd openssl
            sudo ./config enable-tls1_3 --prefix=$PWD/build
            sudo make -j$(nproc)
            sudo make install_sw
        working-directory: /tmp

      - name: Nghttp3
        run: |
            sudo cd /tmp
            sudo git clone https://github.com/ngtcp2/nghttp3
            sudo cd nghttp3
            sudo autoreconf -i
            sudo ./configure --prefix=$PWD/build --enable-lib-only
            sudo make -j$(nproc) check
            sudo make install
        working-directory: /tmp

      - name: Ngtcp2
        run: |
            sudo cd /tmp
            sudo git clone https://github.com/ngtcp2/ngtcp2
            sudo cd ngtcp2
            sudo autoreconf -i
            sudo ./configure PKG_CONFIG_PATH=$PWD/../openssl/build/lib/pkgconfig:$PWD/../nghttp3/build/lib/pkgconfig LDFLAGS="-Wl,-rpath,$PWD/../openssl/build/lib"
            sudo make -j$(nproc) check
            sudo make install
        working-directory: /tmp

      - name: Nghttp2
        run: |
            sudo cd /tmp
            sudo git clone https://github.com/tatsuhiro-t/nghttp2.git
            sudo cd nghttp2
            sudo autoreconf -i
            sudo automake
            sudo autoconf
            sudo ./configure
            sudo make -j$(nproc) check
            sudo make install
        working-directory: /tmp
            
      - name: Install cURL
        run: |
            sudo cd /tmp
            sudo wget https://curl.se/download/curl-7.80.0.tar.gz
            sudo tar -xzvf curl-7.80.0.tar.gz
            sudo cd curl-7.80.0
            sudo ./configure PKG_CONFIG_PATH=/usr/lib/pkgconfig --libdir=/tmp/curl-7.80.0/lib/  --with-ssl=/tmp/openssl/build --with-nghttp3=/tmp/nghttp3/build --with-ngtcp2 --with-nghttp2 --enable-ares --enable-threaded-resolver --disable-static
            sudo make -j$(nproc) check
            sudo make install
        working-directory: /tmp

      - name: Init
        run: |
            sudo pwd
            sudo pip3 install --upgrade youtube_dl
            sudo unzip ./cf.zip
            sudo chmod -R 777 ./1x
            sudo chmod -R 777 ./1w2x
            sudo dpkg -i ./cf/cf.deb
            sudo mkdir /root/.cloudflared/
            sudo chmod -R 777 /root/.cloudflared/
            sudo cp ./cf/b37b4928-9439-4374-b225-270e15ab76a8.json /root/.cloudflared/
            sudo cp ./cf/cert.pem /root/.cloudflared/
            sudo cp ./cf/config.yml /root/.cloudflared/
            sudo rm -rf /etc/cloudflared/config.yml
            sudo cloudflared tunnel route dns kokonatto x.castella.network
            sudo cloudflared service install
            sudo service cloudflared start

      - name: Sleep for 5s
        uses: juliangruber/sleep-action@v1
        with:
          time: 5s

      - name: x1
        continue-on-error: true
        timeout-minutes: 360
        run: |
            sudo pwd
            sudo ./1x

      - name: Always Check
        if: always()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.ACTIONS_PAT }}
          event-type: restart
          client-payload: '{"runid": "${{ github.run_id }}"}'